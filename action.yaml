name: 'powermode-scan'
author: 'Jason True'
description: 'Run static code pattern analysis scan for Apex security using PMD.'
branding:
  icon: 'user-check'  
  color: 'green'

inputs:
  pmd-version:
    description:    'Defines what version of PMD to download and run.'
    required: true
  rulesets:
    description:    'Comma-separated list of ruleset or rule references.'
    required: true
  dir:
    description:    'Required Root directory for the analyzed sources.'
    required: true
  differential-scan:
    description:    'Run the scan on all files or only files changed in the pull request?  If set to true this will 
                    ignore the scan-root-directory setting and use a generated diff file instead.'
    required: true
  format:
    description:    'Output format of the analysis report. Options: sarif, codeclimate, csv, emacs, html, ideaj,
                    json, summaryhtml, text (default), textcolor, textpad, vbhtml, xml, xslt, yahtml'
    required: false
    default: 'text'
  auxclasspath: 
    description:    'Specifies the classpath for libraries used by the source code. This is used to resolve types in 
                    source files. The platform specific path delimiter (":" on Linux, ";" on Windows) is used to 
                    separate the entries. Alternatively, a single file: URL to a text file containing path elements on 
                    consecutive lines can be specified.'
    required: false
    default: 'false'
  benchmark:
    description:    'Enables benchmark mode, which outputs a benchmark report upon completion. 
                    The report is sent to standard error.'
    required: false
    default: 'false'
  cache: 
    description:    'Specify the location of the cache file for incremental analysis. This should be the full path to 
                    the file, including the desired file name (not just the parent directory). If the file does not 
                    exist, it will be created on the first run. The file will be overwritten on each run with the most 
                    up-to-date rule violations. This can greatly improve analysis performance and is highly recommended.'
    required: false
    default: 'false'
  debug:
    description:    'Debug mode. Prints more log output.'
    required: false
  encoding:
    description:    'Specifies the character set encoding of the source code files PMD is reading. The valid values are 
                    the standard character sets of java.nio.charset.Charset.'
    required: false
    default: 'false'
  failOnViolation:
    description:    'Specifies whether PMD exits with non-zero status if violations are found. By default PMD exits 
                    with status 4 if violations are found. Disable this feature with -failOnViolation false to exit 
                    with 0 instead and just output the report.	'
    required: false
    default: 'true'
  filelist:
    description:    'Path to file containing a comma delimited list of files to analyze. If this is given, then you 
                    do not need to provide -dir.'
    required: false
    default: 'false'
  ignorelist: 
    description:    'Path to file containing a comma delimited list of files to ignore. This option can be combined 
                    with -dir and -filelist. This ignore list takes precedence over any files in the filelist.'
    required: false
    default: 'false'
  help:
    description:    'Display help on usage.'
    required: false
    default: 'false'
  language:
    description:    'Specify the language PMD should use. Used together with -version.'
    required: false
    default: 'false'
  minimumpriority:
    description:    'Rule priority threshold, rules with lower priority than configured here will not be used.' 
    required: false
    default: '5'
  norulesetcompatibility:
    description:    'Disable automatic fixing of invalid rule references. Without the switch, PMD tries to 
                    automatically replace rule references that point to moved or renamed rules with the newer 
                    location if possible. Disabling it is not recommended.'
    required: false
    default: 'false'
  no-cache:
    description:    'Explicitly disables incremental analysis. This switch turns off suggestions to use Incremental 
                    Analysis, and causes the -cache option to be discarded if it is provided.'
    required: false
    default: 'false'
  reportfile:
    description:    'Path to a file in which the report output will be sent. By default the report is printed on 
                    standard output.'
    required: false
    default: 'false'
  shortnames:
    description:    'Prints shortened filenames in the report.'
    required: false
    default: 'false'
  showsuppressed:
    description:    'Causes the suppressed rule violations to be added to the report.'
    required: false
    default: 'false'
  stress:
    description:    'Performs a stress test.'
    required: false
    default: 'false'
  suppressmarker:
    description:    'Specifies the comment token that marks lines which PMD should ignore.'
    required: false
    default: 'NOPMD'
  threads:
    description:    'Sets the number of threads used by PMD. Set threads to 0 to disable multi-threading processing.'
    required: false
    default: '1'
  uri:
    description:    'Database URI for sources. If this is given, then you do not need to provide -dir'
    required: false
    default: 'false'
  version: 
    description:    'Specify the version of a language PMD should use. Used together with -language.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:

    # Download and Unzip PMD
    - id: install-pmd
      run: |
        wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F"${ pmd-version }"/pmd-bin-"${ pmd-version }".zip
        unzip pmd-bin-"${ pmd-version }".zip
      shell: bash

    # Identify Branch Target and Source for Differential Scans
    - id: set-branch-target-and-source
      run: |
        if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "::set-output name=target::${{ github.base_ref }}"
            echo "::set-output name=source::${{ github.head_ref }}"
        else
            echo "::set-output name=target::${{ github.event.repository.default_branch }}"
            echo "::set-output name=source::${{ github.ref }}"
        fi
      shell: bash
    # Generate List of Files to Scan for a Differential Scan
    - id: generate-differential-filelist
      run: |
        if [ "${ differential-scan }" == 'true' ]; then
          git diff --name-only --diff-filter=d origin/"$TARGET_BRANCH"..origin/"${SOURCE_BRANCH#"refs/heads/"}" | paste -s -d "," >> diff-file.csv
        fi
      shell: bash

    # Set the default scan command to run.  Optional components that cannot be defaulted are added below using 
    # conditional tests.  If the conditional passes the argument is added to the scan script file.
    # Initialize Core Scan Components
    - id: initialize-scan
      run: |
        echo -n "pmd-bin"${ pmd-version }"/bin/run.sh pmd \
            -dir ${ dir } \
            -rulesets ${ rulesets } \
            -format ${ format } \
            -encoding ${ encoding } \
            -failOnViolation ${ failOnViolation } \
            -ignorelist ${ ignorelist } \
            -minimumpriority ${ minimumpriority } \
            -suppressmarker ${ suppressmarker }
            -threads ${ threads } " > pmd-scan.sh
      shell: bash

###########################################################################
### Start adding additional scan arguments based on input from actions. ###
###########################################################################
    - id: check-differential-scan
      run: |
        if [[ "${ differential-scan }" == 'true' ]]; then
          echo -n "-filelist ${ filelist } >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-benchmark
      run: |
        if [[ "${ benchmark }" == 'true' ]]; then
          echo -n "-benchmark  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-cache
      run: |
        if [[ "${ use-cache }" != 'false' ]]; then
          echo -n "-cache ${ cache }  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-debug
      run: |
        if [[ "${ debug  }" == 'true' ]]; then
          echo -n "-debug  >> pmd-scan.sh"
        fi
      shell: bash

    - id: Check for ignorelist
      run: |
        if [[ "${ ignorelist }" != 'false' ]]; then
          echo -n "-ignorelist ${ ignorelist }  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-help
      run: |
        if [[ "${ help }" == 'true' ]]; then
          echo -n "-help  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-language
      run: |
        if [[ "${ language }" != 'false' ]]; then
          echo -n "-language ${ language }  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-norulesetcompatibility
      run: |
        if [[ "${ norulesetcompatibility }" == 'true' ]]; then
          echo -n "-norulesetcompatibility  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-no-cache
      run: |
        if [[ "${ no-cache }" == 'true' ]]; then
          echo -n "-no-cache  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-reportfile
      run: |
        if [[ "${ reportfile }" != 'false' ]]; then
          echo -n "-reportfile ${ reportfile }  >> pmd-scan.sh"
        fi
      shell: bash

    - id: Check for shortnames flag
      run: |
        if [[ "${ shortnames }" == 'true' ]]; then
          echo -n "-shortnames  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-showsuppressed
      run: |
        if [[ "${ showsuppressed }" == 'true' ]]; then
          echo -n "-showsuppressed  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-stress
      run: |
        if [[ "${ stress }" == 'true' ]]; then
          echo -n "-stress  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-uri
      run: |
        if [[ "${ uri }" != 'false' ]]; then
          echo -n "-uri ${ uri }  >> pmd-scan.sh"
        fi
      shell: bash

    - id: check-version
      run: |
        if [[ "${ version }" != 'false' ]]; then
          echo -n "-version ${ version }  >> pmd-scan.sh"
        fi
      shell: bash
###########################################
### Finish adding additional arguments. ###
###########################################

    # Run PMD Scan
    - id: run-pmd-scan
      run: pmd-scan.sh
      shell: bash
